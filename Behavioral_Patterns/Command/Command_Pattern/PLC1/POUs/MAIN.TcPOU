<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="MAIN" Id="{e55fe8ab-45d1-4feb-a2af-4eb48f72a41c}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// Invoker
	fbHMI_panel				: FB_ShowControlPanel;
	fbPendant_panel			: FB_ShowControlPanel;
	
	// Receiver
	fbFlyingHoist			: FB_FlyingHoist;
	refFlyingHoist			: REFERENCE TO FB_FlyingHoist := fbFlyingHoist;	
	fbFlameCannon			: FB_FlameCannon;
	refFlameCannon			: REFERENCE TO FB_FlameCannon := fbFlameCannon;	
	fbMovingHead			: FB_MovingHead;
	refMovingHead			: REFERENCE TO FB_MovingHead := fbMovingHead;	

	// Commands
	fbActorDownCommand			: FB_ActorDownCommand(refFlyingHoist);
	fbActorUpCommand			: FB_ActorUpCommand(refFlyingHoist);
	fbActorRotateCCWCommand		: FB_ActorRotateCCWCommand(refFlyingHoist);
	fbActorRotateCWCommand		: FB_ActorRotateCWCommand(refFlyingHoist);
	fbActorStopRotateCommand	: FB_ActorStopRotateCommand(refFlyingHoist);
	fbActorStopVerticalCommand	: FB_ActorStopVerticalCommand(refFlyingHoist);
	fbFireShowModeCommand		: FB_FireShowModeCommand(fbFlameCannon);
	fbFirePyroModeCommand		: FB_FireShowModeCommand(fbFlameCannon);
	fbFireOffCommand			: FB_FireOffCommand(fbFlameCannon);
	fbMovingHeadOnCommand		: FB_MovingHeadOnCommand(fbMovingHead);
	fbMovingHeadOffCommand		: FB_MovingHeadOffCommand(fbMovingHead);
	fbShowOnCommnad				: FB_ShowOnCommnad(fbActorUpCommand, fbActorRotateCWCommand, fbFireShowModeCommand);
	bInit						: BOOL;
	
	fHoistVertPos				: LREAL;
	fHoistRotPos				: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (NOT bInit) THEN
	fbHMI_panel.SetCommand(1, fbActorDownCommand);
	fbHMI_panel.SetCommand(2, fbActorUpCommand);
	fbHMI_panel.SetCommand(3, fbActorRotateCCWCommand);
	fbHMI_panel.SetCommand(4, fbActorRotateCWCommand);
	fbHMI_panel.SetCommand(5, fbActorStopVerticalCommand);
	fbHMI_panel.SetCommand(6, fbActorStopRotateCommand);
	fbHMI_panel.SetCommand(7, fbFireShowModeCommand);
	fbHMI_panel.SetCommand(8, fbFirePyroModeCommand);
	fbHMI_panel.SetCommand(9, fbFireOffCommand);
	fbHMI_panel.SetCommand(10, fbMovingHeadOnCommand);
	fbHMI_panel.SetCommand(11, fbMovingHeadOffCommand);
	fbHMI_panel.SetCommand(12, fbShowOnCommnad);
	
	fbPendant_panel.SetCommand(1, fbActorDownCommand);
	fbPendant_panel.SetCommand(2, fbActorUpCommand);
	fbPendant_panel.SetCommand(3, fbActorRotateCCWCommand);
	fbPendant_panel.SetCommand(4, fbActorRotateCWCommand);
	fbPendant_panel.SetCommand(5, fbActorStopVerticalCommand);
	fbPendant_panel.SetCommand(6, fbActorStopRotateCommand);

	
	bInit := TRUE;
ELSE
	fbHMI_panel();	
	fbPendant_panel();
END_IF


(* Trigger fbPendant_panel.arrSwitch[1 - 4] for moves, and arrSwitch[5 - 6] for stops.
OR
Trigger fbHMI_panel.arrSwitch[1 - 4] for moves, and arrSwitch[5 - 6] for stops. *)

// Check the positions of the hoist
fHoistRotPos 	:= fbFlyingHoist.RotationalPosition;
fHoistVertPos 	:= fbFlyingHoist.VerticalPosition;]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="34" Count="4" />
      <LineId Id="101" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="39" Count="3" />
      <LineId Id="46" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="43" Count="2" />
      <LineId Id="54" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>